<h1>My blog</h1>
<article>
  <h2>Heading of a nice article</h2>
  <p>Content here.</p>
</article>
<article>
  <h2>Another heading of another article</h2>
  <p>More content here.</p>
</article>

Each article has the contain property with a value of content applied in the CSS.

CSS
Copy to Clipboard

article {
  contain: content;
}

Each article is independent of the other articles on the page, and so they have been given contain: content to indicate to the browser that this is the case. The browser can then use this information to make decisions about how to render the content. For example, it might not render articles that are outside the viewable area.

more stuff on 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment

use chatgpt with proper prompts in order to extract best and important  pieces of information 
frmo this above given source . 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CSS filter effects

The properties in the CSS filter effects module let you define a way of processing an element's rendering before the element is displayed in the document. Examples of such effects include blurring and changing the intensity of the color of an element.
Filter effects in action
Play with the various sliders to apply filter effects to the image below:
blur()

 brightness()

 contrast()

 drop-shadow()

 grayscale()

 hue-rotate()

 invert()

 opacity()

 saturate()

 sepia()

Related concepts

<image> data type

<filter-function> data type

background-image CSS property

background-blend-mode CSS property

mix-blend-mode CSS property

interpolation glossary term

color-interpolation-filters SVG property


See also
Properties in the CSS compositing and blending module enable blending an element's background layers together and blending an element with its container
The SVG <filter> element and the SVG filter primitives: <feSpotLight>, <feBlend>, <feColorMatrix>, <feComponentTransfer>, <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>, <feDisplacementMap>, <feDropShadow>, <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMorphology>, <feOffset>, <feSpecularLighting>, <feTile>, <feTurbulence>


more at 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_filter_effects

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CSS flexible box layout

The CSS flexible box layout module defines a CSS box model optimized for user interface design, and the layout of items in one dimension. In the flex layout model, the children of a flex container can be laid out in any direction, and can "flex" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated.

Basic example
In the following example a container has been set to display: flex, which means that the three child items become flex items. The value of justify-content has been set to space-between in order to space the items out evenly on the main axis. An equal amount of space is placed between each item with the left and right items being flush with the edges of the flex container. You can also see that the items are stretching on the cross axis, due to the default value of align-items being stretch. The items stretch to the height of the flex container, making them each appear as tall as the tallest item.

Reference
Properties
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
order
Properties for alignment
The properties align-content, align-self, align-items and justify-content initially appeared in the Flexbox specification, but are now defined in Box Alignment. The Flexbox spec now refers to the Box Alignment specification for up to date definitions. Also additional alignment properties are now defined in Box Alignment.

justify-content
align-content
align-items
align-self
place-content
place-items
row-gap
column-gap
gap


Basic concepts of flexbox
An overview of the features of Flexbox

Relationship of flexbox to other layout methods
How Flexbox relates to other layout methods, and other CSS specifications

Aligning items in a flex container
How the Box Alignment properties work with Flexbox.

Ordering flex items
Explaining the different ways to change the order and direction of items, and covering the potential issues in doing so.

Controlling ratios of flex items along the main axis
Explaining the flex-grow, flex-shrink and flex-basis properties.

Mastering wrapping of flex items
How to create flex containers with multiple lines and control the display of the items in those lines.

Typical use cases of flexbox
Common design patterns that are typical Flexbox use cases.

https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////